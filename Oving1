3 Why concurrency?

Why do we use concurrent execution (multithreading/multiprocessing, or the like)? List a fair few reasons.

	*A multithreaded program is able to operate faster on a multicore system
	
	*Remain responsive to input. For ex. running worker thread concurrently with main execution thread to allow 	a program to remain responsive. 
	

    How can adding more concurrent tasks make programming simpler? (Think about translation from idea to 		code...)
    
    ANS: Reduce complexity
    
    And how can it make programming more difficult? (Maybe come back to this after you have worked on part 4 of this exercise)
    
    ANS: Deadlocks, races etc. 

What are the differences between processes, threads, green threads, and fibers?


	ANS:
	
    Process: OS-managed (possibly) truly concurrent, at least in the presence of suitable hardware support. 	Exist within their own address space.
    
    Thread: OS-managed, within the same address space as the parent and all its other threads. Possibly truly 	concurrent, and multi-tasking is pre-emptive.
    
    Green Thread: These are user-space projections of the same concept as threads, but are not OS-managed. 		Probably not truly concurrent, except in the sense that there may be multiple worker threads or processes 	giving them CPU time concurrently, so probably best to consider this as interleaved or multiplexed.
    
    
    Fibers: OS-managed. Exactly threads, except co-operatively multitasking, and hence not truly concurrent.


    Which one of these do pthread_create() (C/POSIX), threading.Thread() (Python), go (Go) create?
    How does pythons Global Interpreter Lock (GIL) influence the way a python Thread behaves?
    
    ANS: THREADS
    
    With this in mind: What is the workaround for the GIL (Hint: it's another module)? How do you then share resources (variables/data)?
    
    ANS: multiprocessing module. Share manually
    
    What does func GOMAXPROCS(n int) int change?
    
    ANS: The GOMAXPROCS variable limits the number of operating system threads that can execute user-level Go code simultaneously. There is no limit to the number of threads that can be blocked in system calls on behalf of Go code; those do not count against the GOMAXPROCS limit. This package's GOMAXPROCS function queries and changes the limit. 
    
    


(Note: There are other ways of sidestepping the GIL, for example using another interpreter/implementation (IronPython, Jython, Stackless Python, ...))
